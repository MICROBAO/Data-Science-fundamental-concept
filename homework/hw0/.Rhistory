print('d')
a=100
b<-100
a=1:10
a[0]
a[1]
a[10]
a[11]
a[1:2]
a[-2]
a[-2:-4]
a[-2,-3]
a*2
log10(a)
exp(a)
a
c=True
c=TRUE
C
!C
!c
x<-c(T,T,F,F)
X
x
x<-q(T,T,F)
A=2:2020
A
X
X
X=T
X
Y=F
X&&Y
X|Y
X||T
X=c(0,0,1,0)
x
Y=c(0,0,1,1,1)
Y
x
Y
y
y=c(T,T,F,F)
x&y
x
y
y
y=c(T,T,F,F)
Y
t
y
y<-c(T,T,T,T,T)
y
y&&x
y%x
y&x
getwd()
getwd()
setwd(F:/2015 spring/cs 249 ml/hw1)
setwd("F:/2015 spring/cs 249 ml/hw1")
getwd()
list.files()
state<-read.csv( "table.csv" )
length(state)
summary(state)
plot(state$what,state$list)
plot(state$High,state$low)
state<-na.omit(state)
State$High
state$High
state$High[1]
if(state$High[1]>state$Close)
{
status<-"down"
}
else if (state$High[1]<state$Close[1])
{status<-"up"}
else{status<-"flat"}
status
cong<-state$High>state$Close
status
status
}
else if (state$High[1]<state$Close[1])
{status<-"up"}
else{status<-"flat"}
status
cong<-state$High>state$Close
head(cong)
if(state$High[1]>state$Close)
{
status<-"down"
}
else if (state$High[1]<state$Close[1])
{status<-"up"}
else{status<-"flat"}
status
cong<-state$Open>state$Close
head(cong)
if(state$Open[1]>state$Close)
{status<-"down"}
else if (state$Open[1]<state$Close[1])
{status<-"up"}
else{status<-"flat"}
status
if(state$Open[1]>state$Close[1])
{status<-"down"}
else if (state$Open[1]<state$Close[1])
{status<-"up"}
else{status<-"flat"}
status
cong<-state$Open>state$Close
head(cong)
state<-read.csv( "table.csv" )
state<-na.omit(state)
state<-read.csv( "table.csv" )
state<-na.omit(stateif(state$Open[1]>state$Close[1])
{status<-"down"}
state<-na.omit(state)
if(state$Open[1]>state$Close[1])
{status<-"down"}
else if (state$Open[1]<state$Close[1])
{status<-"down"}
else{status<-"flat"}
if(state$Open[1]>state$Close[1])
{status<-"up"}
else if (state$Open[1]<state$Close[1])
{status<-"down"}
else{status<-"flat"}
status
cong<-state$Open>state$Close
head(cong)
table(status)
cong<-state$Open>state$Close
status<-ifelse(cond,"up","down")
status<-ifelse(cong,"up","down")
cong<-state$Open>state$Close
status<-ifelse(cong,"down",status)
table(status)
head(status)
cong<-state$Open>state$Close
status<-ifelse(cong,"up","down")
cong<-state$Open<state$Close
status<-ifelse(cong,"down",status)
head(status)
table(status)
?table
status
table(status)
x<-sample(-1:19)
x
x<-sample(0:5,2)
x
x<-sample(0:20,2)
x
x<-sample(0:20,5)
x
)
)
table(status)
x<-sample(0:20,5)
x
x>0
x<-sample(-10:20,5)
x
x>0
all(x>0)
any(x>0)
any(x==0)
x<-sample(-10:20,10)
x
x<-sample(-10:20,10)
x
x>0
all(x>0)
any(x==0)
source('~/.active-rstudio-document', echo=TRUE)
any(x==y)
x<-sample(-10:20,10)
y<-sample(-10:20,10)
any(x==y)
x<-sample(-10:20,10)
y<-sample(-10:20,10)
x
y
any(x==y)
x>0&y>0
x>0|y>0
fluctuation<-(state$High-state$Low)/state$Open
head(fluctuation)
big.change<-fluctuation>0.08
big.change<-abs(fluctuation)>0.08
head(big.change)
which(big.change)
?which
x<-c()
for (i in 1:10){
x<-append(x,i^2)
}
x
x<-c()
for (i in 1:10)
{x<-append(i^2)}
x
{x<-append(x^2,i^2)}
x<-c()
for (i in 1:10)
{x<-append(x^2,i^2)}
x
?append
state
the.ticker<-unique(state$Close)
the.ticker
a<-c(1,1,1,12,2,3,4,4,56,6,7,889)
a
unique(a)
state$Low[TRUE,FALSE]
state
for (ticker in the.ticker){
ticker
}
these<-state$Close==ticker
for (ticker in the.ticker){
these<-state$Close==ticker
}
a<-1
b<-2
a<-1
b<-2
c<-"dd"
d<-"ss"
ls()
rm(b)
ls()
rm(list=ls()))
rm(list=ls())
ls()
x<-1:10
x
as.factor(x)
as.numeric(x)
as.charactor(x)
as.character(x)
as.mertrix(x)
as.matrix(x)
list.files()
state<-read.csv(  "Data_sb49.csv"   )
head(state,3)
apply(state,1,sum)
head(state,4)
apply(state,2,sum)
apply(state,2,sum)
head(state,3)
apply(state,2,sum)
state<-read.csv(  "Data_sb49.csv",header=FALSE   )
head(state,3)
apply(state,2,sum)
?apply
apply(state,2,sum)
head(state,3)
state<-read.csv(  "Data_sb49.csv",header=FALSE   )
head(state,3)
state<-read.csv(  "Data_sb49.csv"  )
head(state,3)
apply(state,2,sum)
apply(state,2,sum,na.rm=TRUE)
colsum(state)
colSums(state)
rowSums(state)
install.packages("igraph")
library(igraph)
igraph
graph.empty(n=0, directed=TRUE)
graph(edges, n=max(edges), directed=TRUE)
graph.star(n, mode = c("in", "out", "mutual", "undirected"), center = 1)
graph.lattice(dimvector = NULL, length = NULL, dim = NULL, nei = 1,
directed = FALSE, mutual = FALSE, circular = FALSE, ...)
graph.ring(n, directed = FALSE, mutual = FALSE, circular=TRUE)
graph.tree(n, children = 2, mode=c("out", "in", "undirected"))
graph.full(n, directed = FALSE, loops = FALSE)
graph.full.citation(n, directed = TRUE)
graph.atlas(n)
graph.edgelist(el, directed=TRUE)
graph.extended.chordal.ring(n, w)
graph.empty(n=0, directed=TRUE)
graph(edges, n=max(edges), directed=TRUE)
int igraph_create(igraph_t *graph, const igraph_vector_t *edges,
igraph_integer_t 1000, igraph_bool_t FALSE);
int igraph_create(igraph_t *graph, const igraph_vector_t *edges,igraph_integer_t 1000, igraph_bool_t FALSE)
g
graph( c(0,1, 0,2, 1,2, 2,4), n=5 )
g<-graph( c(0,1, 0,2, 1,2, 2,4), n=5 )
g<-graph( c(0,1, 0,2, 1,2, 2,4), n=5 )
g<-graph( c(0,1, 0,2, 1,2, 2,4), n=5 )
graph(c(1,2,3,4,5), n=max(edges), directed=TRUE)
graph(4, n=max(edges), directed=TRUE)
graph(4, 4, directed=TRUE)
g<-graph(4, 4,TRUE)
library(igraph)
+ attr: name (g/c), mutual (g/x), circular (g/x)
attr: name (g/c), mutual (g/x), circular (g/x)
graph(c(1,0), n=max(edges), directed=FALSE)
getwd()
